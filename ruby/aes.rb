#
# An implementation of the AES encryption algorithm. 
# For educational purposes only!
#
# Copyright (c) 2011 Justin Ethier
#
class AES
  def initialize
    @block_size = 128  
  end
  
  def get_sbox(byte)
   sbox = 
   # //0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F
   [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, #0
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, #1
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, #2
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, #3
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, #4
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, #5
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, #6
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, #7
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, #8
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, #9
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, #A
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, #B
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, #C
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, #D
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, #E
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16] #F
    
    return sbox[byte]
  end

  def get_sbox_inverse(byte)
   sbox =
   [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]
    
    return sbox[byte]
  end   
  
  # Inputs: 128 bit block of data in form of a 16-member byte array
  #            encryption key in form of a 16-member byte array
  # Outputs: Encrypted byte data in an array
  def encrypt(block, key)
    # Create round keys
    keys = key_schedule(key)

    # Initial Round 
    block = add_round_key(block, key, 0)
    #print_block(block)

    # Rounds 
    for round in 1..10
      block = sub_bytes(block)
      #puts "sub_bytes"
      #print_block(block)
      
      #puts "shift_rows"
      block = shift_rows(block)
      #print_block(block)
      
      #puts "mix columns"
      block = mix_columns(block) if round < 10 # no MixColumns in last round
      #print_block(block)
      
      #puts "add round key"
      block = add_round_key(block, keys, round)
      #print_block(block)
    end
    
    block
  end
  
  def decrypt(block, key)
    # Create round keys
    keys = key_schedule(key)

    # Initial Round 
    block = add_round_key(block, key, 10)
    #print_block(block)

    # Rounds 
    for round in 1..10
      block = inv_shift_rows(block)
      block = inv_sub_bytes(block)
      block = add_round_key(block, keys, 10 - round)
      block = inv_mix_columns(block) if round < 10 # no MixColumns in last round
    end
    
    block    
  end
  
  def print_block(block)
    for i in 0...block.size
      puts "" if (i % 4) == 0
      printf("%02x ", block[i])
      #puts ""
    end
  end
  
  # a non-linear substitution step where each byte is replaced with another according to a lookup table.
  def sub_bytes(block, inverse=false)
    result = []
    for byte in block
      if inverse
        result << get_sbox_inverse(byte)
      else
        result << get_sbox(byte)
      end 
    end
    result
  end
  
  def inv_sub_bytes(block)
    sub_bytes(block, true)
  end
  
  # a transposition step where each row of the state is shifted cyclically a certain number of steps.
  # rows organized:
  # 1 5 ...
  # 2 6
  # 3 7
  # 4 8
  def shift_rows(block, inverse=false)
    output = []
    col_size = 4 #@block_size / (8 * 4) 
    for col in 0...col_size
      row = [block[col], block[col+4], block[col+8], block[col+12]]
      row.reverse! if inverse
      col.times {row << row.shift }
      row.reverse! if inverse
      col_size.times {|i| output[i * col_size + col] = row[i]}
    end
    
    output
  end
  
  def inv_shift_rows(block)
    shift_rows(block, true)
  end
  
  # a mixing operation which operates on the columns of the state, combining the four bytes in each column
  def mix_columns(block)
    #TODO, see: http://en.wikipedia.org/wiki/Rijndael_mix_columns
    result = []
      
    row_size = 4 #@block_size / (8 * 4) 
    for col in 0...row_size
      
      mul_by_2 = []
      for i in 0...4
        mul_by_2[i] = block[col * row_size + i]
        high_bit = mul_by_2[i] & 0x80
        mul_by_2[i] <<= 1
        mul_by_2[i] ^= 0x1b if (high_bit == 0x80)
      end

      result[row_size * col + 0] = mul_by_2[0] ^ block[3 + col * row_size]  ^ block[2 + col * row_size] ^ 
                         mul_by_2[1] ^ block[1 + col * row_size]
      result[row_size * col + 1] = mul_by_2[1] ^ block[0 + col * row_size]  ^ block[3 + col * row_size] ^ 
                         mul_by_2[2] ^ block[2 + col * row_size]
      result[row_size * col + 2] = mul_by_2[2] ^ block[1 + col * row_size]  ^ block[0 + col * row_size] ^ 
                         mul_by_2[3] ^ block[3 + col * row_size]
      result[row_size * col +3 ] = mul_by_2[3] ^ block[2 + col * row_size]  ^ block[1 + col * row_size] ^ 
                         mul_by_2[0] ^ block[0 + col * row_size]
    end
  
    result.map{|r| r % 256}
  end

  #TODO: need to change row/col mapping (see above)
  def inv_mix_columns(block)
    result = []
      
    row_size = @block_size / (8 * 4) 
    for col in 0...row_size
      result[row_size * col + 0] = mul_bytes_in_gf(block[col * row_size + 0], 0xe) ^
                                             mul_bytes_in_gf(block[col * row_size + 1], 0xb) ^
                                             mul_bytes_in_gf(block[col * row_size + 2], 0xd) ^
                                             mul_bytes_in_gf(block[col * row_size + 3], 0x9)
      result[row_size * col + 1] = mul_bytes_in_gf(block[col * row_size + 0], 0x9) ^
                                             mul_bytes_in_gf(block[col * row_size + 1], 0xe) ^
                                             mul_bytes_in_gf(block[col * row_size + 2], 0xb) ^
                                             mul_bytes_in_gf(block[col * row_size + 3], 0xd)
      result[row_size * col + 2] = mul_bytes_in_gf(block[col * row_size + 0], 0xd) ^
                                             mul_bytes_in_gf(block[col * row_size + 1], 0x9) ^
                                             mul_bytes_in_gf(block[col * row_size + 2], 0xe) ^
                                             mul_bytes_in_gf(block[col * row_size + 3], 0xb)
      result[row_size * col + 3] = mul_bytes_in_gf(block[col * row_size + 0], 0xb) ^
                                             mul_bytes_in_gf(block[col * row_size + 1], 0xd) ^
                                             mul_bytes_in_gf(block[col * row_size + 2], 0x9) ^
                                             mul_bytes_in_gf(block[col * row_size + 3], 0xe)
     end
     
     result
  end
  
  # Multiply 2 numbers in GF(2 ^ 8)
  def mul_bytes_in_gf(byte, mul_by)
    # Precalculate all possible multiplications on the byte
    lookup = [byte]
    for i in 1..7
      high_bit = lookup[i - 1] & 0x80
      lookup[i] = lookup[i - 1] << 1
      lookup[i] ^= 0x1b if (high_bit == 0x80)
    end
    
    # Add (XOR) the multiplication of each bit that is set
    result = 0
    for i in 0..7
      result ^= lookup[i] if ((mul_by >> i) & 1) == 1
    end
    result % 256
  end    
  
  # each byte of the state is combined with the round key; each round key is derived from the cipher key using a key schedule.
  # Inputs: data block array, key schedule array, round number
  # Outputs: updated block state array
  def add_round_key(block, key_schedule, round)
    output = []
    16.times {|i| output << (block[i] ^ key_schedule[round * 16 + i])}
    output
  end
  
  #  Input: AES Key (an array of bytes)
  # Output: Array of Keys, one for each round
  def key_schedule(key)
    keys = key
    #b has a value of 176 for 128-bit keys, 208 for 192-bit keys, and 240 for 256-bit keys 
    i = 1
    10.times do |b| # 176 / 16
      t = [keys[-4], keys[-3], keys[-2], keys[-1]] # TODO: Could say keys[-4..-1]
      t = key_schedule_core(t, i)
      i += 1
      4.times {|idx| keys << (t[idx] ^ keys[-16])}
      
      3.times do
        t = [keys[-4], keys[-3], keys[-2], keys[-1]]
        4.times {|idx| keys << (t[idx] ^ keys[-16])}
      end
    end
    
    keys
  end

  #The input is a 32-bit word (array of 4 bytes) and an iteration number i. The output is a 32-bit word. 
  def key_schedule_core(word, i)
    #Copy the output over to the input. 
    #Use the above described rotate operation to rotate the output eight bits to the left 
    output = word << word.shift
    #Apply Rijndael's S-box on all four individual bytes in the output word 
    output = output.map{|byte| get_sbox(byte)}
    #On just the first (leftmost) byte of the output word, exclusive or the byte with 2 to the power of (i-1). 
    #In other words, perform the rcon operation with i as the input, and exclusive or the rcon output with the 
    #first byte of the output word 
    output[0] ^= rcon(i)
    return output
  end
  
  def rcon(i)
    rcon = [0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb]
    return rcon[i]    
  end
end

